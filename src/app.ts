console.log('Hello, world!, soy nivel A1, esto el nuevo GunBound')
import { join } from 'path'
import { createBot, createProvider, createFlow, addKeyword, utils } from '@builderbot/bot'
import { MemoryDB as Database } from '@builderbot/bot'
import { BaileysProvider as Provider } from '@builderbot/provider-baileys'

const PORT = process.env.PORT ?? 3008

const flowToA = addKeyword<Provider, Database>('inf').addAnswer( 
    ['üìÑ Puedes escribirnos de lunes a viernes de 9:00 a. m. a 6:00 p. m. por este chat de la tienda, por correo electr√≥nico a soporteonline@touchechile.cl y WhatsApp al +56 22289500. Los casos del fin de semana y festivos se atender√°n a partir del siguiente d√≠a h√°bil en orden de llegada. \n', 
    'Reg√≠strate para recibir las √∫ltimas noticias y actualizaci√≥n de catalogos \n',
    'Recibe promociones y actualizaciones especiales por correo electr√≥nico. Puedes darte de baja en cualquier momento. *si* '].join(
        '\n'
    ),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
        if (ctx.body.toLocaleLowerCase().includes('si')) {
            return gotoFlow(registerFlow)
        }
        await flowDynamic('Gracias!')
        return
    },
)

const flowToB = addKeyword<Provider, Database>('pedido').addAnswer( 
    ['Para ver el estado, ind√≠canos los detalles de tu pedido.  \n', 
    'N√∫mero de Pedido \n',
    'Direccion de correo electr√≥nico \n',
    'Recibe promociones y actualizaciones especiales por correo electr√≥nico.  *si* '].join(
    '\n'
    ),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
        if (ctx.body.toLocaleLowerCase().includes('si')) {
            return gotoFlow(registerFlow)
        }
        await flowDynamic('Gracias!')
        return
    },
)

const flowToC = addKeyword<Provider, Database>('envio').addAnswer( 
    ['Todos los pedidos ingresados a la plataforma online, ser√°n despachados en el orden de llegada de cada pedido. \n',
    'Cuando el pedido est√° preparado para su env√≠o o retiro, le llegar√° un mensaje al correo con la confirmaci√≥n.\n',
    'La entrega se har√° aproximadamente de:\n',
    '24 horas h√°biles* para Retiro en Tienda.\n',
    '1 a 3 d√≠as h√°biles* para Santiago y Regiones de 3 a 5 d√≠as h√°biles*, el tiempo de entrega depender√° de la ciudad de destino.\n',
    
    'En ocasiones se presentan novedades que nos impiden cumplir con nuestra promesa de entrega, sin embargo, queremos garantizarte que este tiempo no exceder√° un plazo m√°ximo de 30 d√≠as.\n',
    '*D√≠as h√°biles se consideran de lunes a viernes.\n',
        
    'Recibe promociones y actualizaciones especiales por correo electr√≥nico.  *si* '].join(
    '\n'
    ),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
        if (ctx.body.toLocaleLowerCase().includes('si')) {
            return gotoFlow(registerFlow)
        }
        await flowDynamic('Gracias!')
        return
    },
)
const flowToD = addKeyword<Provider, Database>('cambios').addAnswer( 
    ['Para hacer un cambio tienes 2 opciones: Puede hacer el cambio GRATIS en cualquier Touch√© Store de Chile presentando la boleta de compra.    Env√≠a el paquete a la direcci√≥n:   Alonso de C√≥rdova 2843, Local A, Vitacura, A nombre de Comercializadora MS S.A (TOUCHE), Con una nota que diga "PEDIDO XXXX CAMBIO POR TALLA O POR PRODUCTO‚Äù Incluir el nombre de la tienda TOUCHE Santiago ‚Äì Chile Tel√©fono: (+56) 222289500    Los cambios ser√°n procesados dentro de los 15 d√≠as h√°biles posteriores a la recepci√≥n del env√≠o.\n',
        
    'Recibe promociones y actualizaciones especiales por correo electr√≥nico.  *si* '].join(
    '\n'
    ),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
        if (ctx.body.toLocaleLowerCase().includes('si')) {
            return gotoFlow(registerFlow)
        }
        await flowDynamic('Gracias!')
        return
    },
)

const flowDefault = addKeyword<Provider, Database>('').addAnswer("Env√≠anos un mensaje directo si tienes alguna pregunta. Nos complace ayudarte. No has indicado ninguna opci√≥n ü§î")

/**
        *
const discordFlow = addKeyword<Provider, Database>('inf').addAnswer(
    ['üìÑ Puedes escribirnos de lunes a viernes de 9:00 a. m. a 6:00 p. m. por este chat de la tienda, por correo electr√≥nico a soporteonline@touchechile.cl y WhatsApp al +56 22289500. Los casos del fin de semana y festivos se atender√°n a partir del siguiente d√≠a h√°bil en orden de llegada. \n', 
    'Reg√≠strate para recibir las √∫ltimas noticias y actualizaci√≥n de catalogos \n',
    'Recibe promociones y actualizaciones especiales por correo electr√≥nico. Puedes darte de baja en cualquier momento. *si* '].join(
        '\n'
    ),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
        if (ctx.body.toLocaleLowerCase().includes('si')) {
            return gotoFlow(registerFlow)
        }
        await flowDynamic('Gracias!')
        return
    },
)
 */

const welcomeFlow = addKeyword<Provider, Database>(['hi', 'hello', 'hola','Hola', 'HOLA', 'BUENAS', 'Buenas', 'buenas'])
    .addAnswer(`üôå Hola, Bienvenido *touchechile.cl*`)
    .addAnswer(
        [
            '¬°Hola! Env√≠anos un mensaje con tus preguntas. ¬°Estamos encantados de ayudarte!',
             'Habla con nosotros, indicanos en que podemos ayudarte:',
             '1Ô∏è‚É£ ¬øCu√°l es la informaci√≥n de contacto? ',
             '  üëâüèª escribe *inf* para ver informaci√≥n de contacto',
             '2Ô∏è‚É£ Hacer seguimiento de mi pedido ',
             '  üëâüèª escribe *pedido* para ver informaci√≥n',
             '3Ô∏è‚É£¬øCu√°l es la pol√≠tica de env√≠o y entrega? ',
             '  üëâüèª escribe *envio* para ver informaci√≥n',
             '4Ô∏è‚É£¬øCu√°l es la pol√≠tica de cambios y devoluciones? ',
             '  üëâüèª escribe *cambios* para ver informaci√≥n',
        ].join('\n'),

        { delay: 800, capture: true },
        /**
        * 
        async (ctx, { fallBack }) => {
            if (!ctx.body.toLocaleLowerCase().includes('inf')) {
                return fallBack('Deber√≠as escribir *inf*, *pedido*, *envio*, *cambios*')            
            }
            if (!ctx.body.toLocaleLowerCase().includes('pedido')) {
                return fallBack('Deber√≠as escribir *inf*, *pedido*, *envio*, *cambios*')            
            }
            if (!ctx.body.toLocaleLowerCase().includes('envio')) {
                return fallBack('Deber√≠as escribir *inf*, *pedido*, *envio*, *cambios*')            
            }
            if (!ctx.body.toLocaleLowerCase().includes('cambios')) {
                return fallBack('Deber√≠as escribir *inf*, *pedido*, *envio*, *cambios*')            
            }
            return             
        },
        
        [discordFlow]
         */        
    )
    
    .addAnswer(`Gracias por la respuesta `, async (ctx, { gotoFlow }) => {
        const userAnswer = ctx.body
        if(userAnswer === 'inf'){
            return gotoFlow(flowToA)
        } 
        if(userAnswer === 'pedido'){
            return gotoFlow(flowToB)
        } 
        if(userAnswer === 'envio'){
            return gotoFlow(flowToC)
        } 
        if(userAnswer === 'cambios'){
            return gotoFlow(flowToD)
        } 
        return gotoFlow(flowDefault)
    })

const registerFlow = addKeyword<Provider, Database>(utils.setEvent('REGISTER_FLOW'))
    .addAnswer(`Indicanos nombre`, { capture: true }, async (ctx, { state }) => {
        await state.update({ name: ctx.body })
    })
    .addAnswer('Indicanos correo electronico', { capture: true }, async (ctx, { state }) => {
        await state.update({ correo: ctx.body })
    })
    .addAction(async (_, { flowDynamic, state }) => {
        await flowDynamic(`${state.get('name')}, Gracias!: correo: ${state.get('correo')}`)
    })

const fullSamplesFlow = addKeyword<Provider, Database>(['samples', utils.setEvent('SAMPLES')])
    .addAnswer(`üí™ I'll send you a lot files...`)
    .addAnswer(`Send image from Local`, { media: join(process.cwd(), 'assets', 'sample.png') })
    .addAnswer(`Send video from URL`, {
        media: 'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExYTJ0ZGdjd2syeXAwMjQ4aWdkcW04OWlqcXI3Ynh1ODkwZ25zZWZ1dCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LCohAb657pSdHv0Q5h/giphy.mp4',
    })
    .addAnswer(`Send audio from URL`, { media: 'https://cdn.freesound.org/previews/728/728142_11861866-lq.mp3' })
    .addAnswer(`Send file from URL`, {
        media: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf',
    })

const main = async () => {
    const adapterFlow = createFlow([welcomeFlow, registerFlow, fullSamplesFlow])
    
    const adapterProvider = createProvider(Provider)
    const adapterDB = new Database()

    const { handleCtx, httpServer } = await createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })

    adapterProvider.server.post(
        '/v1/messages',
        handleCtx(async (bot, req, res) => {
            const { number, message, urlMedia } = req.body
            await bot.sendMessage(number, message, { media: urlMedia ?? null })
            return res.end('sended')
        })
    )

    adapterProvider.server.post(
        '/v1/register',
        handleCtx(async (bot, req, res) => {
            const { number, name } = req.body
            await bot.dispatch('REGISTER_FLOW', { from: number, name })
            return res.end('trigger')
        })
    )

    adapterProvider.server.post(
        '/v1/samples',
        handleCtx(async (bot, req, res) => {
            const { number, name } = req.body
            await bot.dispatch('SAMPLES', { from: number, name })
            return res.end('trigger')
        })
    )

    adapterProvider.server.post(
        '/v1/blacklist',
        handleCtx(async (bot, req, res) => {
            const { number, intent } = req.body
            if (intent === 'remove') bot.blacklist.remove(number)
            if (intent === 'add') bot.blacklist.add(number)

            res.writeHead(200, { 'Content-Type': 'application/json' })
            return res.end(JSON.stringify({ status: 'ok', number, intent }))
        })
    )

    httpServer(+PORT)
}

main()
